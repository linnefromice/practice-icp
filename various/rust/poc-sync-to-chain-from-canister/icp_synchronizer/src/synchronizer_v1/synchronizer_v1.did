type AccountInfo = record {
    address : text;
    pub_key : text;
};
type Round = record {
    round_id : nat;
    answer : int;
    started_at : nat64;
    updated_at : nat64;
};
type CandidSignedTransaction = record {
    message_hash : text;
    v : nat64;
    r : text;
    s : text;
    raw_transaction : text;
    transaction_hash : text;
};
service : {
    "update_state": (int) -> (Round);
    "periodic_sync_state": (opt nat, opt nat, opt nat) -> ();
    "sync_state": (nat, int, nat, nat, opt nat, opt nat, opt nat) -> (variant { Ok : text; Err : text });
    "debug_oracle_latest_round_id": () -> (variant { Ok : nat; Err : text });
    "debug_sync_state_signed_tx": (nat, int, nat, nat, opt nat, opt nat, opt nat) -> (variant { Ok : CandidSignedTransaction; Err : text });
    "debug_sync_state_estimate_gas": (nat, int, nat, nat, opt nat, opt nat) -> (variant { Ok : text; Err : text });
    "debug_balance_of_native": () -> (variant { Ok : text; Err : text });
    "debug_gas_price": () -> (variant { Ok : text; Err : text });
    "debug_transfer_native": (text, nat64) -> (variant { Ok : text; Err : text });
    "debug_rpc_endpoint": () -> (text) query;
    "debug_account_info": () -> (variant { Ok : AccountInfo; Err : text });
    "debug_update_state": (int, nat64, nat64) -> (Round);
    "debug_latest_round_id": () -> (nat) query;
    "debug_round": (nat) -> (Round) query;
    "debug_rounds_length": () -> (nat) query;
    "debug_synced_latest_round_id": () -> (nat) query;
    "debug_periodic_sync_state": (nat64, nat, opt nat, opt nat, opt nat) -> ();
    "debug_stop_timer": () -> ();
}
